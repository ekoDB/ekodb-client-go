# Makefile for ekoDB Go Client Library

# Environment variables
GO := go
MODULE := github.com/ekoDB/ekodb-client-go

# Color codes for pretty output
CYAN := \033[36m
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
RESET := \033[0m

.PHONY: all build test test-verbose test-coverage clean fmt fmt-go fmt-md fmt-check format lint vet mod-tidy mod-verify mod-download install help setup deps-check deps-update publish bump-version check-ready examples pre-commit version info

# ASCII Banner for ekoDB
BANNER := \
	\ "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïê‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïê‚ïó‚ïî‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  " "\n" \
		"‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïö‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà   ‚ñà‚ñà‚ïë‚ïë‚ñà‚ñà  ‚ñà‚ñà‚ïë   " "\n" \
		"‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà " "\n" \
		"‚ñà‚ñà     ‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà    ‚ñà‚ñà‚ïë‚ñà‚ñà   ‚ñà‚ñà " "\n" \
		"‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë  ‚ñà‚ñà ‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà " "\n" \
		"‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  " "\n"

# Language Sub-Banner
GO_BANNER := \
	"                      üî∑ Go Client Library" "\n"

# Default target
all: build

help:
	@echo $(BANNER)
	@echo $(GO_BANNER)
	@echo "‚ú® $(CYAN)ekoDB Go Client Library ‚ú®$(RESET)"
	@echo ""
	@echo "$(CYAN)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(RESET)"
	@echo "üìå $(CYAN)BUILD & DEVELOPMENT$(RESET)"
	@echo "$(CYAN)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(RESET)"
	@echo "  üõ†Ô∏è  $(GREEN)make build$(RESET)          - Build the Go client library"
	@echo "  üß™ $(GREEN)make test$(RESET)           - Run all tests"
	@echo "  üß™ $(GREEN)make test-verbose$(RESET)   - Run tests with verbose output"
	@echo "  üìä $(GREEN)make test-coverage$(RESET)  - Run tests with coverage report"
	@echo "  üñåÔ∏è  $(GREEN)make fmt$(RESET)            - Format all code (Go + Markdown)"
	@echo "  üñåÔ∏è  $(GREEN)make format$(RESET)         - Format all code (alias for fmt)"
	@echo "     $(GREEN)make fmt-go$(RESET)         - Format Go code only"
	@echo "     $(GREEN)make fmt-md$(RESET)         - Format Markdown files only"
	@echo "  üîç $(GREEN)make fmt-check$(RESET)      - Check if code is formatted"
	@echo "  üî¨ $(GREEN)make lint$(RESET)           - Run golangci-lint"
	@echo "  üî¨ $(GREEN)make vet$(RESET)            - Run go vet"
	@echo "  üßπ $(GREEN)make clean$(RESET)          - Clean build artifacts"
	@echo ""
	@echo "$(CYAN)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(RESET)"
	@echo "üì¶ $(CYAN)DEPENDENCIES$(RESET)"
	@echo "$(CYAN)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(RESET)"
	@echo "  üì• $(GREEN)make mod-download$(RESET)   - Download dependencies"
	@echo "  üßπ $(GREEN)make mod-tidy$(RESET)       - Tidy go.mod and go.sum"
	@echo "  ‚úÖ $(GREEN)make mod-verify$(RESET)     - Verify dependencies"
	@echo "  üîç $(GREEN)make deps-check$(RESET)     - Check for outdated dependencies"
	@echo "  üîÑ $(GREEN)make deps-update$(RESET)    - Update all dependencies"
	@echo ""
	@echo "$(CYAN)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(RESET)"
	@echo "üöÄ $(CYAN)PUBLISHING$(RESET)"
	@echo "$(CYAN)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(RESET)"
	@echo "  üöÄ $(GREEN)make publish$(RESET)        - Publish new version (runs publish.sh)"
	@echo "  üî¢ $(GREEN)make bump-version$(RESET)   - Bump version and create git tag"
	@echo "  ‚úÖ $(GREEN)make check-ready$(RESET)    - Check if ready to publish"
	@echo ""
	@echo "$(CYAN)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(RESET)"
	@echo "üß™ $(CYAN)EXAMPLES$(RESET)"
	@echo "$(CYAN)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(RESET)"
	@echo "  üìö $(GREEN)make test-examples$(RESET)  - Run Go examples from ../ekodb-client"
	@echo "  üìö $(GREEN)make examples$(RESET)       - Alias for test-examples"
	@echo ""
	@echo "$(CYAN)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(RESET)"
	@echo "‚öôÔ∏è  $(CYAN)SETUP$(RESET)"
	@echo "$(CYAN)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(RESET)"
	@echo "  üõ†Ô∏è  $(GREEN)make setup$(RESET)          - Initial setup (download deps, install tools)"
	@echo "  üì¶ $(GREEN)make install$(RESET)        - Install the package locally"
	@echo ""
	@echo "$(CYAN)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(RESET)"
	@echo "üí° $(CYAN)QUICK START$(RESET)"
	@echo "$(CYAN)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(RESET)"
	@echo "  1. $(GREEN)make setup$(RESET)     - Set up development environment"
	@echo "  2. $(GREEN)make test$(RESET)      - Run tests to verify everything works"
	@echo "  3. $(GREEN)make fmt$(RESET)       - Format code before committing"
	@echo "  4. $(GREEN)make publish$(RESET)   - Publish new version"

# Build the library
build:
	@echo "üõ†Ô∏è  $(CYAN)Building Go client library...$(RESET)"
	@$(GO) build -v ./...
	@echo "‚úÖ $(GREEN)Build complete!$(RESET)"

# Run tests
test:
	@echo "üß™ $(CYAN)Running tests...$(RESET)"
	@$(GO) test ./... -race
	@echo "‚úÖ $(GREEN)Tests complete!$(RESET)"

# Run tests with verbose output
test-verbose:
	@echo "üß™ $(CYAN)Running tests (verbose)...$(RESET)"
	@$(GO) test -v ./... -race
	@echo "‚úÖ $(GREEN)Tests complete!$(RESET)"

# Run tests with coverage
test-coverage:
	@echo "üìä $(CYAN)Running tests with coverage...$(RESET)"
	@$(GO) test ./... -race -coverprofile=coverage.out -covermode=atomic
	@$(GO) tool cover -html=coverage.out -o coverage.html
	@echo "‚úÖ $(GREEN)Coverage report generated!$(RESET)"
	@echo "üìÑ $(YELLOW)HTML report: coverage.html$(RESET)"
	@echo "üìä $(YELLOW)Coverage summary:$(RESET)"
	@$(GO) tool cover -func=coverage.out | tail -1

# Format all code (Go + Markdown)
fmt: fmt-go fmt-md
	@echo "‚úÖ $(GREEN)All formatting complete!$(RESET)"

# Format Go code only
fmt-go:
	@echo "üñåÔ∏è  $(CYAN)Formatting Go code...$(RESET)"
	@$(GO) fmt ./...
	@echo "‚úÖ $(GREEN)Go formatting complete!$(RESET)"

# Format Markdown files
fmt-md:
	@echo "üìù $(CYAN)Formatting Markdown files...$(RESET)"
	@if command -v prettier > /dev/null; then \
		prettier --write "**/*.md" --prose-wrap always --print-width 80; \
		echo "‚úÖ $(GREEN)Markdown formatting complete with prettier!$(RESET)"; \
	elif command -v mdformat > /dev/null; then \
		find . -name "*.md" -not -path "./node_modules/*" -not -path "./vendor/*" -exec mdformat {} \; 2>/dev/null || true; \
		echo "‚úÖ $(GREEN)Markdown formatting complete with mdformat!$(RESET)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  No Markdown formatter found$(RESET)"; \
		echo "$(YELLOW)üí° Install prettier: npm install -g prettier$(RESET)"; \
		echo "$(YELLOW)üí° Or install mdformat: pip install mdformat$(RESET)"; \
		echo "$(YELLOW)Skipping Markdown formatting...$(RESET)"; \
	fi

# Check if code is formatted
fmt-check:
	@echo "üîç $(CYAN)Checking code formatting...$(RESET)"
	@UNFORMATTED=$$(gofmt -l .); \
	if [ -n "$$UNFORMATTED" ]; then \
		echo "$(RED)‚ùå The following files are not formatted:$(RESET)"; \
		echo "$$UNFORMATTED"; \
		exit 1; \
	fi
	@echo "‚úÖ $(GREEN)All files are properly formatted!$(RESET)"

# Run golangci-lint
lint:
	@echo "üî¨ $(CYAN)Running golangci-lint...$(RESET)"
	@if command -v golangci-lint > /dev/null; then \
		golangci-lint run ./...; \
		echo "‚úÖ $(GREEN)Linting complete!$(RESET)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  golangci-lint not found$(RESET)"; \
		echo "$(YELLOW)Install with: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest$(RESET)"; \
		echo "$(YELLOW)Or visit: https://golangci-lint.run/usage/install/$(RESET)"; \
	fi

# Run go vet
vet:
	@echo "üî¨ $(CYAN)Running go vet...$(RESET)"
	@$(GO) vet ./...
	@echo "‚úÖ $(GREEN)Vet complete!$(RESET)"

# Download dependencies
mod-download:
	@echo "üì• $(CYAN)Downloading dependencies...$(RESET)"
	@$(GO) mod download
	@echo "‚úÖ $(GREEN)Dependencies downloaded!$(RESET)"

# Tidy go.mod and go.sum
mod-tidy:
	@echo "üßπ $(CYAN)Tidying go.mod and go.sum...$(RESET)"
	@$(GO) mod tidy
	@echo "‚úÖ $(GREEN)Tidy complete!$(RESET)"

# Verify dependencies
mod-verify:
	@echo "‚úÖ $(CYAN)Verifying dependencies...$(RESET)"
	@$(GO) mod verify
	@echo "‚úÖ $(GREEN)Dependencies verified!$(RESET)"

# Check for outdated dependencies
deps-check:
	@echo "üîç $(CYAN)Checking for outdated dependencies...$(RESET)"
	@$(GO) list -u -m all
	@echo "‚úÖ $(GREEN)Dependency check complete!$(RESET)"

# Update all dependencies
deps-update:
	@echo "üîÑ $(CYAN)Updating dependencies...$(RESET)"
	@$(GO) get -u ./...
	@$(GO) mod tidy
	@echo "‚úÖ $(GREEN)Dependencies updated!$(RESET)"

# Clean build artifacts
clean:
	@echo "üßπ $(CYAN)Cleaning build artifacts...$(RESET)"
	@$(GO) clean
	@rm -f coverage.out coverage.html
	@echo "‚úÖ $(GREEN)Clean complete!$(RESET)"

# Install the package locally
install:
	@echo "üì¶ $(CYAN)Installing package locally...$(RESET)"
	@$(GO) install
	@echo "‚úÖ $(GREEN)Package installed!$(RESET)"

# Setup development environment
setup: mod-download
	@echo "üõ†Ô∏è  $(CYAN)Setting up development environment...$(RESET)"
	@echo "üì¶ $(CYAN)Installing development tools...$(RESET)"
	@if ! command -v golangci-lint > /dev/null; then \
		echo "  üì• Installing golangci-lint..."; \
		go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest; \
	else \
		echo "  ‚úÖ golangci-lint already installed"; \
	fi
	@echo "‚úÖ $(GREEN)Setup complete!$(RESET)"
	@echo ""
	@echo "$(YELLOW)üí° Next steps:$(RESET)"
	@echo "  1. Run tests: make test"
	@echo "  2. Format code: make fmt"
	@echo "  3. Run linter: make lint"

# Check if ready to publish
check-ready: fmt-check vet test
	@echo "‚úÖ $(CYAN)Checking if ready to publish...$(RESET)"
	@if [ -n "$$(git status --porcelain)" ]; then \
		echo "$(RED)‚ùå You have uncommitted changes$(RESET)"; \
		git status --short; \
		exit 1; \
	fi
	@echo "‚úÖ $(GREEN)Ready to publish!$(RESET)"

# Publish new version (uses publish.sh script)
publish: check-ready
	@echo "üöÄ $(CYAN)Publishing new version...$(RESET)"
	@chmod +x publish.sh
	@./publish.sh

# Bump version and create git tag
bump-version:
	@echo "üî¢ $(CYAN)Bumping version...$(RESET)"
	@echo ""
	@LATEST_TAG=$$(git describe --tags --abbrev=0 2>/dev/null || echo "none"); \
	echo "üìå $(YELLOW)Latest tag: $$LATEST_TAG$(RESET)"; \
	echo ""; \
	read -p "Enter new version (e.g., v0.2.0): " NEW_VERSION; \
	if [ -z "$$NEW_VERSION" ]; then \
		echo "$(RED)‚ùå No version provided$(RESET)"; \
		exit 1; \
	fi; \
	if [[ ! $$NEW_VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$$ ]]; then \
		echo "$(RED)‚ùå Version must be in format vX.Y.Z (e.g., v0.2.0)$(RESET)"; \
		exit 1; \
	fi; \
	echo ""; \
	echo "$(YELLOW)üì¶ New version: $$NEW_VERSION$(RESET)"; \
	echo ""; \
	read -p "Continue? (y/N): " -n 1 -r; \
	echo; \
	if [[ ! $$REPLY =~ ^[Yy]$$ ]]; then \
		echo "$(RED)‚ùå Cancelled$(RESET)"; \
		exit 1; \
	fi; \
	echo ""; \
	echo "$(CYAN)Running tests before tagging...$(RESET)"; \
	$(GO) test ./... -race || { echo "$(RED)‚ùå Tests failed$(RESET)"; exit 1; }; \
	echo ""; \
	echo "$(CYAN)Creating tag $$NEW_VERSION...$(RESET)"; \
	git tag -a "$$NEW_VERSION" -m "Release $$NEW_VERSION"; \
	echo "‚úÖ $(GREEN)Tag created: $$NEW_VERSION$(RESET)"; \
	echo ""; \
	echo "$(YELLOW)üí° Next steps:$(RESET)"; \
	echo "  1. Push tag: git push origin $$NEW_VERSION"; \
	echo "  2. Push commits: git push origin main"; \
	echo "  3. Wait for pkg.go.dev to index (a few minutes)"; \
	echo "  4. Users can install: go get $(MODULE)@$$NEW_VERSION"

# Run example programs from ekodb-client repository
test-examples:
	@echo "üìö $(CYAN)Running Go examples from ekodb-client repository...$(RESET)"
	@if [ -d "../ekodb-client" ]; then \
		echo "üì¶ $(CYAN)Found ekodb-client, preparing Go examples...$(RESET)"; \
		if [ -d "../ekodb-client/examples/go" ]; then \
			echo "üßπ $(CYAN)Running go mod tidy in examples/go...$(RESET)"; \
			(cd ../ekodb-client/examples/go && go mod tidy); \
		fi; \
		echo "üß™ $(CYAN)Running make test-examples-go...$(RESET)"; \
		(cd ../ekodb-client && make test-examples-go); \
	else \
		echo "$(RED)‚ùå ekodb-client repository not found at ../ekodb-client$(RESET)"; \
		echo "$(YELLOW)üí° Clone ekodb-client next to this repository:$(RESET)"; \
		echo "$(YELLOW)   cd .. && git clone <ekodb-client-repo-url> ekodb-client$(RESET)"; \
		echo "$(YELLOW)   Then run: make test-examples$(RESET)"; \
		exit 1; \
	fi

# Alias for test-examples
examples: test-examples

# Run all checks before committing
pre-commit: fmt vet lint test
	@echo "‚úÖ $(GREEN)All pre-commit checks passed!$(RESET)"

# Alias for format
format: fmt

# Show current version
version:
	@echo "üìå $(CYAN)Current version:$(RESET)"
	@git describe --tags --abbrev=0 2>/dev/null || echo "$(YELLOW)No tags found$(RESET)"
	@echo ""
	@echo "üì¶ $(CYAN)Module:$(RESET) $(MODULE)"
	@echo "üî∑ $(CYAN)Go version:$(RESET) $$(go version | awk '{print $$3}')"

# Show module information
info:
	@echo "üì¶ $(CYAN)Module Information$(RESET)"
	@echo "$(CYAN)‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ$(RESET)"
	@echo "Module: $(MODULE)"
	@echo "Go Version: $$(go version | awk '{print $$3}')"
	@echo "Latest Tag: $$(git describe --tags --abbrev=0 2>/dev/null || echo 'none')"
	@echo ""
	@echo "üìä $(CYAN)Dependencies:$(RESET)"
	@$(GO) list -m all
	@echo ""
	@echo "üìÅ $(CYAN)Files:$(RESET)"
	@find . -name "*.go" -not -path "./vendor/*" | wc -l | xargs echo "  Go files:"
	@echo ""
	@echo "üìè $(CYAN)Lines of Code:$(RESET)"
	@find . -name "*.go" -not -path "./vendor/*" -exec wc -l {} + | tail -1 | awk '{print "  " $$1 " lines"}'
